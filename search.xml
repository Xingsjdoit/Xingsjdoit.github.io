<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-Matery</title>
    <url>/2023/05/27/hexo-matery/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我是文章摘要…. <span id="more"></span></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>主题</category>
      </categories>
      <tags>
        <tag>Hexo-Matery</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2023/05/29/rabbitmq/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>系统内部各个组件/模块可以借助中间件共享信息与资源，除了消息队列之外，常见的中间件还有 RPC 框架、分布式组件、HTTP 服务器、任务调度框架、配置中心、数据库层的分库分表工具和数据迁移工具等等。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li><strong>通过异步处理提高系统性能（减少响应所需时间）</strong></li>
<li><strong>削峰/限流</strong></li>
<li><strong>降低系统耦合性。</strong></li>
</ol>
<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="1-单机部署"><a href="#1-单机部署" class="headerlink" title="1.单机部署"></a>1.单机部署</h2><p>开启虚拟机，使用FinalShell连接虚拟机</p>
<p>我们在Centos7虚拟机中使用Docker来安装。</p>
<h3 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1.下载镜像"></a>1.1.下载镜像</h3><p>方式一：在线拉取</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull rabbitmq:3.8-management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<p>方式二：从本地加载</p>
<p>下载镜像包：</p>
<p>上传到虚拟机中后，使用命令加载镜像即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> load <span class="token parameter variable">-i</span> mq.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="1-2-运行MQ"><a href="#1-2-运行MQ" class="headerlink" title="1.2.运行MQ"></a>1.2.运行MQ</h3><p>执行下面的命令来运行MQ容器：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl  start <span class="token function">docker</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>itcast <span class="token punctuation">\</span>
 <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">123321</span> <span class="token punctuation">\</span>
 <span class="token parameter variable">-v</span> mq-plugins:/plugins <span class="token punctuation">\</span>
 <span class="token parameter variable">--name</span> mq <span class="token punctuation">\</span>
 <span class="token parameter variable">--hostname</span> mq <span class="token punctuation">\</span>
 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\</span>
 <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\</span>
 <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>
 rabbitmq:3-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-3访问UI界面"><a href="#1-3访问UI界面" class="headerlink" title="1.3访问UI界面"></a>1.3访问UI界面</h3><p>虚拟机ip + 15672</p>
]]></content>
      <categories>
        <category>消息队列</category>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>云集-伙伴匹配系统</title>
    <url>/2023/05/30/yun-ji-huo-ban-pi-pei-xi-tong/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>项目优化</p>
 <span id="more"></span>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="1-为了首页查询用户接口的性能，插入100-w-假数据"><a href="#1-为了首页查询用户接口的性能，插入100-w-假数据" class="headerlink" title="1.  为了首页查询用户接口的性能，插入100 w 假数据"></a>1.  为了首页查询用户接口的性能，插入100 w 假数据</h3><ul>
<li><p>方法一：for循环插入</p>
<blockquote>
<p>每次sql连接建立和关闭花费大量时间，浪费性能</p>
</blockquote>
</li>
<li><p>方法二：批量插入MyBatis-Plus自带的 saveBatch 方法（9 sec in 10w）</p>
<blockquote>
<p>预编译优化，只编译一次sql，所以快，但是本质还是for循环一条一条插入</p>
</blockquote>
</li>
<li><p>方法三：mybatis plus 分批插入 + java8 异步并发 CompletableFuture.runAsync()，分批插入10w数据（4 sec in 10 w）</p>
</li>
</ul>
<h3 id="2-主页分页展示100w数据，需要2-sec"><a href="#2-主页分页展示100w数据，需要2-sec" class="headerlink" title="2. 主页分页展示100w数据，需要2 sec"></a>2. 主页分页展示100w数据，需要2 sec</h3><p>redis 缓存主页数据，（缓存优化至600ms）</p>
<p>第一次打开首页，太慢==》定时任务</p>
<blockquote>
<p>Spring Scheduler</p>
<p>cron在线表达式</p>
</blockquote>
<p>多机器定时任务不重复执行==》分布式锁(redisson)</p>
<blockquote>
<ol>
<li><p>用完锁要释放,腾地方finally</p>
</li>
<li><p>锁一定要加过期时间,</p>
<p>没来得及释放锁，因系统故障无法执行释放锁的命令,导致其它线程都无法获得锁，造成死锁。</p>
</li>
<li><p>程序执行40s,而锁30过期,也会出现多个线程同时执行</p>
<blockquote>
<ol>
<li>可能出现连锁效应: 释放掉别人的锁,</li>
</ol>
<p>解决: 释放锁的时候检查锁的标识,如果不是自己的标识,就不释放</p>
<ol>
<li>锁过期时间 续期（redisson看门狗机制）开启一个监听线程，如果方法还没执行完，就帮你重置redis锁的过期时间</li>
</ol>
</blockquote>
</li>
</ol>
</blockquote>
<blockquote>
<ol>
<li><p>释放锁的时候检查锁的标识,如果不是自己的标识,就不释放: 可能先判断出是自己的锁, 但这时锁过期了, 最后仍然释放了别人的锁</p>
<p>解决: 使用lua 脚本, 保证 判断+ 释放 是一个原子操作</p>
</li>
</ol>
</blockquote>
<h3 id="3-事务"><a href="#3-事务" class="headerlink" title="3. 事务"></a>3. 事务</h3><p>创建队伍接口：设计team、user-team表的插入，保证数据一致性，需要事务注解</p>
<h3 id="4-推荐用户"><a href="#4-推荐用户" class="headerlink" title="4. 推荐用户"></a>4. 推荐用户</h3><p>比如针对id为1的用户</p>
<ol>
<li>查出所有用户列表 select （id , tags） where tags is not null 加快查询效率（选择指定列，不为null提高查询效率）</li>
<li>遍历用户列表，<ol>
<li>获取用户标签json字符串，使用Gson转为标签列表</li>
<li>使用编辑距离算法计算两个标签列表的最小编辑距离</li>
<li>使用zset，保存结果，最小编辑距离作为score，用户id作为value</li>
</ol>
</li>
<li>存入redis</li>
</ol>
<p>进行匹配时，先查询redis</p>
<p>针对重点用户列表，提前进行相似用户的计算，缓存预热</p>
]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>云集</tag>
      </tags>
  </entry>
</search>
